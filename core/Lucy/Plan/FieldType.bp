parcel Lucy;

/** Define a field's behavior. 
 * 
 * FieldType is an abstract class defining a set of traits and behaviors which
 * may be associated with one or more field names. 
 * 
 * Properties which are common to all field types include <code>boost</code>,
 * <code>indexed</code>, <code>stored</code>, <code>sortable</code>,
 * <code>binary</code>, and <code>similarity</code>.
 *
 * The <code>boost</code> property is a floating point scoring multiplier
 * which defaults to 1.0.  Values greater than 1.0 cause the field to
 * contribute more to a document's score; lower values, less.
 * 
 * The <code>indexed</code> property indicates whether the field should be
 * indexed (so that it can be searched). 
 * 
 * The <code>stored</code> property indicates whether to store the raw field
 * value, so that it can be retrieved when a document turns up in a search.
 * 
 * The <code>sortable</code> property indicates whether search results should
 * be sortable based on the contents of the field.
 * 
 * The <code>binary</code> property indicates whether the field contains
 * binary or text data.  Unlike most other properties, <code>binary</code> is
 * not settable.
 *
 * The <code>similarity</code> property is a
 * L<Similarity|Lucy::Index::Similarity> object which defines matching
 * and scoring behavior for the field.  It is required if the field is
 * <code>indexed</code>.
 */
abstract class Lucy::Plan::FieldType cnick FType 
    extends Lucy::Object::Obj {

    Similarity   *sim;
    float         boost;
    bool_t        indexed;
    bool_t        stored;
    bool_t        sortable;

    inert FieldType* 
    init(FieldType *self, Similarity *similarity = NULL);

    inert FieldType* 
    init2(FieldType *self, Similarity *similarity = NULL, float boost = 1.0, 
          bool_t indexed = false, bool_t stored = false, 
          bool_t sortable = false);

    public void
    Destroy(FieldType *self);

    /** Setter for <code>boost</code>.
     */
    public void
    Set_Boost(FieldType *self, float boost);

    /** Accessor for <code>boost</code>.
     */
    public float
    Get_Boost(FieldType *self);

    /** Setter for <code>indexed</code>.
     */
    public void
    Set_Indexed(FieldType *self, bool_t indexed);

    /** Accessor for <code>indexed</code>.
     */
    public bool_t
    Indexed(FieldType *self);

    /** Setter for <code>stored</code>.
     */
    public void
    Set_Stored(FieldType *self, bool_t stored);

    /** Accessor for <code>stored</code>.
     */
    public bool_t
    Stored(FieldType *self);

    /** Setter for <code>sortable</code>.
     */
    public void
    Set_Sortable(FieldType *self, bool_t sortable);

    /** Accessor for <code>sortable</code>.
     */
    public bool_t
    Sortable(FieldType *self);

    /** Indicate whether the field contains binary data.
     */
    public bool_t
    Binary(FieldType *self);

    /** Accessor for <code>similarity</code>.
     */
    public nullable Similarity*
    Get_Similarity(FieldType *self);

    /** Compare two values for the field.  The default implementation
     * dispatches to the Compare_To() method of argument <code>a</code>.
     * 
     * @return a negative number if a is "less than" b, 0 if they are "equal",
     * and a positive number if a is "greater than" b.
     */
    public int32_t
    Compare_Values(FieldType *self, Obj *a, Obj *b);

    /** NULL-safe comparison wrapper which sorts NULLs towards the back. 
     */
    inert inline int32_t
    null_back_compare_values(FieldType *self, Obj *a, Obj *b);

    /** Return the Scalar_ID() of the FieldType's underlying data type.
     */
    abstract uint8_t
    Scalar_Type_ID(FieldType *self);

    /** Produce a special mimimal dump which does not include Similarity or
     * Analyzer dumps.  For exclusive internal use by Schema.
     */
    abstract incremented Hash*
    Dump_For_Schema(FieldType *self);

    /** Compares all common properties.
     */
    public bool_t
    Equals(FieldType *self, Obj *other);
}

__C__

static CHY_INLINE int32_t
lucy_FType_null_back_compare_values(lucy_FieldType *self, 
                                    lucy_Obj *a, lucy_Obj *b)
{
    if (a == NULL) {
        if (b == NULL) { return 0; }
        else { return 1; }
    }
    else if (b == NULL) {
        return -1;
    }
    else {
        return Lucy_FType_Compare_Values(self, a, b);
    }
}

__END_C__

/* Copyright 2010 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


parcel Lucy;

/** 
 * Exception.
 * 
 * Most of the time when Lucy encounters an error, it tries to raise a
 * Lucy::Object::Err exception with an error message and context
 * information.
 * 
 * At present, it is only safe to catch exceptions which are specifically
 * documented as catchable; most times when an Err is raised, Lucy leaks
 * memory.
 */

class Lucy::Object::Err extends Lucy::Object::Obj {

    CharBuf *mess;

    inert incremented Err*
    new(decremented CharBuf *mess);

    inert Err*
    init(Err *self, decremented CharBuf *mess);

    public void
    Destroy(Err *self);

    public incremented CharBuf*
    To_String(Err *self);

    void*
    To_Host(Err *self);

    /** Concatenate the supplied argument onto the internal "mess". 
     */
    public void
    Cat_Mess(Err *self, const CharBuf *mess);

    public CharBuf*
    Get_Mess(Err *self);

    public incremented Err*
    Make(Err *self);

    /** Print an error message to stderr with some C contextual information.
     * Usually invoked via the WARN(pattern, ...) macro.
     */
    inert void
    warn_at(const char *file, int line, const char *func, 
            const char *pattern, ...);

    /** Raise an exception. Usually invoked via the THROW macro.
     */
    inert void
    throw_at(VTable *vtable, const char *file, int line, const char *func,
               const char *pattern, ...);

    /** Raise an exception.  Clean up the supplied message by decrementing its
     * refcount.
     *
     * @param vtable The vtable for the Err class to throw.
     * @param message Error message, to be output verbatim.
     */
    inert void
    throw_mess(VTable *vtable, decremented CharBuf *message);

    /** Invoke host exception handling.  
     */
    inert void
    do_throw(decremented Err *self);

    /** Invoke host warning mechanism.  Clean up the supplied message by
     * decrementing its refcount.
     *
     * @param message Error message, to be output verbatim.
     */
    inert void
    warn_mess(decremented CharBuf *message);

    /** Create a formatted error message.  Ususally invoked via the MAKE_MESS
     * macro.
     */
    inert CharBuf*
    make_mess(const char *file, int line, const char *func,
              const char *pattern, ...);

    /** Test that <code>obj</code> belongs to the class represented by
     * <code>vtable</code>, and throw an error if it's not.
     * 
     * @return the object.
     */
    inert Obj*
    assert_is_a(Obj *obj, VTable *vtable, const char *file, int line, 
                const char *func);

    /** Verify that an object belongs to a subclass and not an abstract class.
     */
    inert inline void
    abstract_class_check(Obj *obj, VTable *vtable);
}

__C__
#ifdef CHY_HAS_FUNC_MACRO
 #define LUCY_ERR_FUNC_MACRO CHY_FUNC_MACRO
#else
 #define LUCY_ERR_FUNC_MACRO NULL
#endif

/* Macro version of lucy_Err_throw_at which inserts contextual information
 * automatically, provided that the compiler supports the necessary features.
 */
#ifdef CHY_HAS_VARIADIC_MACROS
 #ifdef CHY_HAS_ISO_VARIADIC_MACROS
  #define LUCY_THROW(_vtable, ...) \
    lucy_Err_throw_at(_vtable, __FILE__, __LINE__, LUCY_ERR_FUNC_MACRO, \
        __VA_ARGS__)
  #define LUCY_WARN(...) \
    lucy_Err_warn_at(__FILE__, __LINE__, LUCY_ERR_FUNC_MACRO, __VA_ARGS__)
  #define LUCY_MAKE_MESS(...) \
    lucy_Err_make_mess(__FILE__, __LINE__, LUCY_ERR_FUNC_MACRO, \
        __VA_ARGS__)
 #elif defined(CHY_HAS_GNUC_VARIADIC_MACROS)
  #define LUCY_THROW(_vtable, args...) \
    lucy_Err_throw_at(_vtable, __FILE__, __LINE__, \
        LUCY_ERR_FUNC_MACRO, ##args)
  #define LUCY_WARN(args...) \
    lucy_Err_warn_at(__FILE__, __LINE__, LUCY_ERR_FUNC_MACRO, ##args)
  #define LUCY_MAKE_MESS(args...) \
    lucy_Err_make_mess(__FILE__, __LINE__, LUCY_ERR_FUNC_MACRO, ##args)
 #endif
#else
  void 
  LUCY_THROW(lucy_VTable *vtable, char* format, ...);
  void 
  LUCY_WARN(char* format, ...);
  void 
  LUCY_MAKE_MESS(char* format, ...);
#endif

#define LUCY_ASSERT_IS_A(_obj, _vtable) \
    lucy_Err_assert_is_a((lucy_Obj*)_obj, (_vtable), \
        __FILE__, __LINE__, LUCY_ERR_FUNC_MACRO)

static CHY_INLINE void
lucy_Err_abstract_class_check(lucy_Obj *obj, lucy_VTable *vtable)
{
    lucy_VTable *const my_vtable = *(lucy_VTable**)obj;
    if (my_vtable == vtable) {
        Lucy_Obj_Dec_RefCount(obj);
        LUCY_THROW(LUCY_ERR, "%o is an abstract class",
            Lucy_Obj_Get_Class_Name(obj));
    }
}

#define LUCY_ABSTRACT_CLASS_CHECK(_obj, _vtable) \
    lucy_Err_abstract_class_check(((lucy_Obj*)_obj), _vtable)

#ifdef LUCY_USE_SHORT_NAMES
  #define THROW                 LUCY_THROW
  #define WARN                  LUCY_WARN
  #define MAKE_MESS             LUCY_MAKE_MESS
  #define ERR_FUNC_MACRO        LUCY_ERR_FUNC_MACRO
  #define ASSERT_IS_A           LUCY_ASSERT_IS_A
  #define ABSTRACT_CLASS_CHECK  LUCY_ABSTRACT_CLASS_CHECK
#endif
__END_C__

/* Copyright 2009 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


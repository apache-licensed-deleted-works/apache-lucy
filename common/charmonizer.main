/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Source fragment for Lucy's charmonizer.c.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Charmonizer/Probe.h"
#include "Charmonizer/Probe/AtomicOps.h"
#include "Charmonizer/Probe/DirManip.h"
#include "Charmonizer/Probe/Floats.h"
#include "Charmonizer/Probe/FuncMacro.h"
#include "Charmonizer/Probe/Headers.h"
#include "Charmonizer/Probe/Integers.h"
#include "Charmonizer/Probe/LargeFiles.h"
#include "Charmonizer/Probe/Memory.h"
#include "Charmonizer/Probe/SymbolVisibility.h"
#include "Charmonizer/Probe/UnusedVars.h"
#include "Charmonizer/Probe/VariadicMacros.h"
#include "Charmonizer/Core/HeaderChecker.h"
#include "Charmonizer/Core/ConfWriter.h"
#include "Charmonizer/Core/ConfWriterC.h"
#include "Charmonizer/Core/ConfWriterPerl.h"
#include "Charmonizer/Core/ConfWriterRuby.h"

#if defined(_WIN32) && !defined(__CYGWIN__)
  #define DIR_SEP "\\"
#else
  #define DIR_SEP "/"
#endif

typedef struct SourceFileContext {
    chaz_MakeVar *var;
    const char *dir;
} SourceFileContext;

static void
S_add_compiler_flags(struct chaz_CLIArgs *args) {
    chaz_CFlags *extra_cflags = chaz_CC_get_extra_cflags();

    if (chaz_Probe_gcc_version_num()) {
        if (getenv("LUCY_VALGRIND")) {
            chaz_CFlags_append(extra_cflags,
                "-DLUCY_VALGRIND -fno-inline-functions");
        }
        else if (getenv("LUCY_DEBUG")) {
            chaz_CFlags_append(extra_cflags,
                "-DLUCY_DEBUG -pedantic -Wall -Wextra -Wno-variadic-macros");
            if (args->charmony_pm) {
                chaz_CFlags_append(extra_cflags, "-DPERL_GCC_PEDANTIC");
            }
        }

        /* Only core source files require this -- not our headers and
         * autogenerated files. */
        chaz_CFlags_append(extra_cflags, "-std=gnu99 -D_GNU_SOURCE");
    }
    else if (chaz_Probe_msvc_version_num()) {
        /* Compile as C++ under MSVC. */
        chaz_CFlags_append(extra_cflags, "/TP");

        /* Thwart stupid warnings. */
        chaz_CFlags_append(extra_cflags, "/D_CRT_SECURE_NO_WARNINGS");
        chaz_CFlags_append(extra_cflags, "/D_SCL_SECURE_NO_WARNINGS");

        if (chaz_Probe_msvc_version_num() < 1300) {
            /* Redefine 'for' to fix broken 'for' scoping under MSVC6. */
            chaz_CFlags_append(extra_cflags, "/Dfor=\"if(0);else for\"");
        }
    }

    /* When compiling for Perl bindings, define HAS_BOOL so that the Perl
     * headers don't redefine 'bool' in conflict with C++.
     *
     * TODO: Compile all files that #include Perl headers separately and
     * remove this directive.
     */
    if (args->charmony_pm) {
        chaz_CFlags_add_define(extra_cflags, "HAS_BOOL", NULL);
    }

    chaz_CFlags_add_define(extra_cflags, "CFP_LUCY", NULL);
}

static void
S_add_common_cflags(chaz_CFlags *cflags) {
    if (chaz_CC_msvc_version_num()) {
        chaz_CFlags_append(cflags, "/nologo");
    }
    chaz_CFlags_enable_optimization(cflags);
}

static void
S_source_file_callback(char *file, void *context) {
    SourceFileContext *sfc = (SourceFileContext*)context;
    const char *json_parser_c = "Lucy" DIR_SEP "Util" DIR_SEP "Json" DIR_SEP
                                "JsonParser.c";
    size_t file_len = strlen(file);
    size_t obj_file_size;
    const char *pattern;
    char *obj_file;

    if (strcmp(file, json_parser_c) == 0) { return; }

    /* Strip extension */
    if (file_len <= 2 || memcmp(file + file_len - 2, ".c", 2) != 0) {
        chaz_Util_warn("Unexpected source file name: %s", file);
        return;
    }
    file[file_len-2] = '\0';

    pattern = "%s" DIR_SEP "%s$(OBJ_EXT)";
    obj_file_size = strlen(pattern) + file_len + 10;
    obj_file = (char*)malloc(obj_file_size);
    sprintf(obj_file, pattern, sfc->dir, file);
    chaz_MakeVar_append(sfc->var, obj_file);
    free(obj_file);
}

static void
S_write_makefile(struct chaz_CLIArgs *args) {
    SourceFileContext sfc;

    const char *base_dir = "..";
    const char *exe_ext  = chaz_OS_exe_ext();
    const char *obj_ext  = chaz_OS_obj_ext();

    const char *json_parser_y = "$(CORE_DIR)" DIR_SEP "Lucy" DIR_SEP "Util"
                                DIR_SEP "Json" DIR_SEP "JsonParser.y";
    const char *json_parser_h = "$(CORE_DIR)" DIR_SEP "Lucy" DIR_SEP "Util"
                                DIR_SEP "Json" DIR_SEP "JsonParser.h";
    const char *json_parser_c = "$(CORE_DIR)" DIR_SEP "Lucy" DIR_SEP "Util"
                                DIR_SEP "Json" DIR_SEP "JsonParser.c";

    char *scratch;

    chaz_MakeFile *makefile;
    chaz_MakeVar  *var;
    chaz_MakeRule *rule;

    int          cflags_style = chaz_CC_get_cflags_style();
    chaz_CFlags *extra_cflags = chaz_CC_get_extra_cflags();
    chaz_CFlags *makefile_cflags;
    chaz_CFlags *lemon_cflags;
    chaz_CFlags *link_flags;
    chaz_CFlags *test_cflags;
    const char  *math_library;
    const char  *test_command;
    char        *shared_lib;

    printf("Creating Makefile...\n");

    makefile = chaz_MakeFile_new();

    /* Directories */

    chaz_MakeFile_add_var(makefile, "SRC_DIR", "src");
    chaz_MakeFile_add_var(makefile, "AUTOGEN_DIR", "autogen");
    chaz_MakeFile_add_var(makefile, "BASE_DIR", base_dir);
    chaz_MakeFile_add_var(makefile, "CORE_DIR",
                          "$(BASE_DIR)" DIR_SEP "core");
    chaz_MakeFile_add_var(makefile, "MODULES_DIR",
                          "$(BASE_DIR)" DIR_SEP "modules");
    chaz_MakeFile_add_var(makefile, "LEMON_DIR",
                          "$(BASE_DIR)" DIR_SEP "lemon");
    chaz_MakeFile_add_var(makefile, "CFC_DIR",
                          "$(BASE_DIR)" DIR_SEP "clownfish" DIR_SEP "compiler"
                          DIR_SEP "c");
    chaz_MakeFile_add_var(makefile, "SNOWSTEM_DIR",
                          "$(MODULES_DIR)" DIR_SEP "analysis" DIR_SEP
                          "snowstem" DIR_SEP "source");
    chaz_MakeFile_add_var(makefile, "SNOWSTOP_DIR",
                          "$(MODULES_DIR)" DIR_SEP "analysis" DIR_SEP
                          "snowstop" DIR_SEP "source");
    chaz_MakeFile_add_var(makefile, "UTF8PROC_DIR",
                          "$(MODULES_DIR)" DIR_SEP "unicode" DIR_SEP
                          "utf8proc");

    /* File extensions */

    chaz_MakeFile_add_var(makefile, "EXE_EXT", exe_ext);
    chaz_MakeFile_add_var(makefile, "OBJ_EXT", obj_ext);

    /* C compiler */

    chaz_MakeFile_add_var(makefile, "CC", chaz_CC_get_cc());

    makefile_cflags = chaz_CFlags_new(cflags_style);
    S_add_common_cflags(makefile_cflags);

    chaz_CFlags_disable_strict_aliasing(makefile_cflags);
    chaz_CFlags_compile_shared_library(makefile_cflags);
    chaz_CFlags_hide_symbols(makefile_cflags);
    if (args->code_coverage) {
        chaz_CFlags_enable_code_coverage(makefile_cflags);
    }

    chaz_CFlags_add_include_dir(makefile_cflags, ".");
    chaz_CFlags_add_include_dir(makefile_cflags, "$(SRC_DIR)");
    chaz_CFlags_add_include_dir(makefile_cflags, "$(CORE_DIR)");
    chaz_CFlags_add_include_dir(makefile_cflags,
                                "$(AUTOGEN_DIR)" DIR_SEP "include");
    chaz_CFlags_add_include_dir(makefile_cflags,
                                "$(SNOWSTEM_DIR)" DIR_SEP "include");
    chaz_CFlags_add_include_dir(makefile_cflags,
                                "$(MODULES_DIR)" DIR_SEP "unicode" DIR_SEP
                                "ucd");
    chaz_CFlags_add_include_dir(makefile_cflags, "$(UTF8PROC_DIR)");

    var = chaz_MakeFile_add_var(makefile, "CFLAGS", NULL);
    chaz_MakeVar_append(var, chaz_CFlags_get_string(extra_cflags));
    chaz_MakeVar_append(var, chaz_CFlags_get_string(makefile_cflags));
    chaz_MakeVar_append(var, chaz_CC_get_cflags());

    chaz_CFlags_destroy(makefile_cflags);

    /* Object files */

    var = chaz_MakeFile_add_var(makefile, "LUCY_OBJS", NULL);
    sfc.var = var;

    sfc.dir = "$(SRC_DIR)";
    chaz_Make_list_files("src", "c", S_source_file_callback, &sfc);

    scratch = (char*)malloc(strlen(base_dir) + 20);
    sprintf(scratch, "%s" DIR_SEP "core", base_dir);
    sfc.dir = "$(CORE_DIR)";
    chaz_Make_list_files(scratch, "c", S_source_file_callback, &sfc);
    free(scratch);
    chaz_MakeVar_append(var, "$(CORE_DIR)" DIR_SEP "Lucy" DIR_SEP "Util"
                        DIR_SEP "Json" DIR_SEP "JsonParser$(OBJ_EXT)");

    scratch = (char*)malloc(strlen(base_dir) + 80);
    sprintf(scratch, "%s" DIR_SEP "modules" DIR_SEP "analysis" DIR_SEP
            "snowstem" DIR_SEP "source", base_dir);
    sfc.dir = "$(SNOWSTEM_DIR)";
    chaz_Make_list_files(scratch, "c", S_source_file_callback, &sfc);
    free(scratch);

    scratch = (char*)malloc(strlen(base_dir) + 80);
    sprintf(scratch, "%s" DIR_SEP "modules" DIR_SEP "analysis" DIR_SEP
            "snowstop" DIR_SEP "source", base_dir);
    sfc.dir = "$(SNOWSTOP_DIR)";
    chaz_Make_list_files(scratch, "c", S_source_file_callback, &sfc);
    free(scratch);

    scratch = (char*)malloc(strlen(base_dir) + 80);
    sprintf(scratch, "%s" DIR_SEP "modules" DIR_SEP "unicode" DIR_SEP
            "utf8proc", base_dir);
    sfc.dir = "$(UTF8PROC_DIR)";
    chaz_Make_list_files(scratch, "c", S_source_file_callback, &sfc);
    free(scratch);

    chaz_MakeVar_append(var, "$(AUTOGEN_DIR)" DIR_SEP "source" DIR_SEP
                        "parcel$(OBJ_EXT)");

    /* Executables */

    chaz_MakeFile_add_var(makefile, "LEMON_EXE",
                          "$(LEMON_DIR)" DIR_SEP "lemon$(EXE_EXT)");
    chaz_MakeFile_add_var(makefile, "CFC_EXE",
                          "$(CFC_DIR)" DIR_SEP "cfc$(EXE_EXT)");
    chaz_MakeFile_add_var(makefile, "TEST_LUCY_EXE",
                          "t" DIR_SEP "test_lucy$(EXE_EXT)");

    /* Rules */

    shared_lib = chaz_CC_shared_lib_file("lucy");
    chaz_MakeFile_add_rule(makefile, "all", shared_lib);

    lemon_cflags = chaz_CFlags_new(cflags_style);
    S_add_common_cflags(lemon_cflags);
    chaz_MakeFile_add_compiled_exe(makefile, "$(LEMON_EXE)",
                                   "$(LEMON_DIR)" DIR_SEP "lemon.c",
                                   lemon_cflags);
    chaz_CFlags_destroy(lemon_cflags);

    rule = chaz_MakeFile_add_rule(makefile, "$(CFC_EXE)", NULL);
    chaz_MakeRule_add_command_make(rule, "$(CFC_DIR)", NULL);

    rule = chaz_MakeFile_add_rule(makefile, "$(AUTOGEN_DIR)", "$(CFC_EXE)");
    chaz_MakeRule_add_command(rule, "$(CFC_EXE) --source=$(CORE_DIR) "
                              "--dest=$(AUTOGEN_DIR) --header=cfc_header");

    rule = chaz_MakeFile_add_rule(makefile, json_parser_c, NULL);
    chaz_MakeRule_add_prereq(rule, "$(LEMON_EXE)");
    chaz_MakeRule_add_prereq(rule, json_parser_y);
    scratch = (char*)malloc(strlen(json_parser_y) + 20);
    sprintf(scratch, "$(LEMON_EXE) -q %s", json_parser_y);
    chaz_MakeRule_add_command(rule, scratch);
    free(scratch);

    /* Needed for parallel builds. */
    rule = chaz_MakeFile_add_rule(makefile, "$(AUTOGEN_DIR)" DIR_SEP "source"
                                  DIR_SEP "parcel.c", "$(AUTOGEN_DIR)");

    rule = chaz_MakeFile_add_rule(makefile, "$(LUCY_OBJS)", NULL);
    chaz_MakeRule_add_prereq(rule, json_parser_c);
    chaz_MakeRule_add_prereq(rule, "$(AUTOGEN_DIR)");

    link_flags = chaz_CFlags_new(cflags_style);
    math_library = chaz_Floats_math_library();
    if (math_library) {
        chaz_CFlags_add_library(link_flags, math_library);
    }
    if (chaz_HeadCheck_check_header("pcre.h")) {
        chaz_CFlags_add_library(link_flags, "pcre");
    }
    if (args->code_coverage) {
        chaz_CFlags_enable_code_coverage(link_flags);
    }
    chaz_MakeFile_add_shared_lib(makefile, "lucy", "$(LUCY_OBJS)", link_flags);
    chaz_CFlags_destroy(link_flags);

    test_cflags = chaz_CFlags_new(cflags_style);
    S_add_common_cflags(test_cflags);
    chaz_CFlags_add_include_dir(test_cflags, ".");
    chaz_CFlags_add_include_dir(test_cflags,
                                "$(AUTOGEN_DIR)" DIR_SEP "include");
    chaz_CFlags_add_library_path(test_cflags, ".");
    chaz_CFlags_add_library(test_cflags, "lucy");
    rule = chaz_MakeFile_add_compiled_exe(makefile, "$(TEST_LUCY_EXE)",
                                          "t" DIR_SEP "test_lucy.c",
                                          test_cflags);
    chaz_MakeRule_add_prereq(rule, shared_lib);
    chaz_CFlags_destroy(test_cflags);

    rule = chaz_MakeFile_add_rule(makefile, "test", "$(TEST_LUCY_EXE)");
    test_command = "$(TEST_LUCY_EXE)";
    if (strcmp(chaz_OS_shared_lib_ext(), ".so") == 0) {
        test_command = "LD_LIBRARY_PATH=. $(TEST_LUCY_EXE)";
    }
    chaz_MakeRule_add_command(rule, test_command);

    if (args->code_coverage) {
        rule = chaz_MakeFile_add_rule(makefile, "coverage",
                                      "$(TEST_LUCY_EXE)");
        chaz_MakeRule_add_command(rule,
                                  "lcov"
                                  " --zerocounters"
                                  " --directory $(BASE_DIR)");
        chaz_MakeRule_add_command(rule, test_command);
        chaz_MakeRule_add_command(rule,
                                  "lcov"
                                  " --capture"
                                  " --directory $(BASE_DIR)"
                                  " --base-directory ."
                                  " --rc lcov_branch_coverage=1"
                                  " --output-file lucy.info");
        chaz_MakeRule_add_command(rule,
                                  "genhtml"
                                  " --branch-coverage"
                                  " --output-directory coverage"
                                  " lucy.info");

        chaz_MakeFile_add_to_cleanup(makefile, "lucy.info");
        chaz_MakeFile_add_dir_to_cleanup(makefile, "coverage");
    }

    chaz_MakeFile_add_to_cleanup(makefile, "$(LUCY_OBJS)");
    chaz_MakeFile_add_to_cleanup(makefile, json_parser_h);
    chaz_MakeFile_add_to_cleanup(makefile, json_parser_c);
    chaz_MakeFile_add_dir_to_cleanup(makefile, "$(AUTOGEN_DIR)");

    chaz_MakeFile_write(makefile);

    chaz_MakeFile_destroy(makefile);
    free(shared_lib);
}

int main(int argc, const char **argv) {
    /* Initialize. */
    struct chaz_CLIArgs args;
    {
        int result = chaz_Probe_parse_cli_args(argc, argv, &args);
        if (!result) {
            chaz_Probe_die_usage();
        }
        chaz_Probe_init(&args);
        S_add_compiler_flags(&args);
    }
    {
        int i;
        for (i = 0; i < argc; i++) {
            if (strncmp(argv[i], "--disable-threads", 17) == 0) {
                chaz_CFlags *extra_cflags = chaz_CC_get_extra_cflags();
                chaz_CFlags_append(extra_cflags, "-DLUCY_NOTHREADS");
                break;
            }
        }
    }

    /* Run probe modules. */
    chaz_BuildEnv_run();
    chaz_DirManip_run();
    chaz_Headers_run();
    chaz_AtomicOps_run();
    chaz_FuncMacro_run();
    chaz_Booleans_run();
    chaz_Integers_run();
    chaz_Floats_run();
    chaz_LargeFiles_run();
    chaz_Memory_run();
    chaz_RegularExpressions_run();
    chaz_SymbolVisibility_run();
    chaz_UnusedVars_run();
    chaz_VariadicMacros_run();

    /* Write custom postamble. */
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_SYS_TYPES_H\n"
        "  #include <sys/types.h>\n"
        "#endif\n\n"
    );
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_STDARG_H\n"
        "  #include <stdarg.h>\n"
        "#endif\n\n"
    );
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_ALLOCA_H\n"
        "  #include <alloca.h>\n"
        "#elif defined(CHY_HAS_MALLOC_H)\n"
        "  #include <malloc.h>\n"
        "#elif defined(CHY_ALLOCA_IN_STDLIB_H)\n"
        "  #include <stdlib.h>\n"
        "#endif\n\n"
    );
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_WINDOWS_H\n"
        "  /* Target Windows XP. */\n"
        "  #ifndef WINVER\n"
        "    #define WINVER 0x0500\n"
        "  #endif\n"
        "  #ifndef _WIN32_WINNT\n"
        "    #define _WIN32_WINNT 0x0500\n"
        "  #endif\n"
        "#endif\n\n"
    );

    if (args.write_makefile) {
        S_write_makefile(&args);
    }

    /* Clean up. */
    chaz_Probe_clean_up();

    return 0;
}


